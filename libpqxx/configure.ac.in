#
# CAUTION: THE configure.ac FILE IS AUTOMATICALLY GENERATED!  DO NOT EDIT IT.
#
# If you want to make changes to configure.ac, edit configure.ac.in instead.
#
# Process configure.ac.in with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(libpqxx, @PQXXVERSION@, [Jeroen T. Vermeulen <jtv@xs4all.nl>])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR([config/m4])
AM_INIT_AUTOMAKE(libpqxx, @PQXXVERSION@)

PQXXVERSION=@PQXXVERSION@
AC_SUBST(PQXXVERSION)

AC_CONFIG_SRCDIR([src/connection.cxx])
AM_CONFIG_HEADER([include/pqxx/config.h])

# default prefix for installs
AC_PREFIX_DEFAULT(/usr/local)

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_DISABLE_SHARED
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PATH_PROG([MKDIR], [mkdir])
AC_PATH_PROG([DOXYGEN], [doxygen])
AM_CONDITIONAL([BUILD_REFERENCE], [test -n "$DOXYGEN"])
AC_CHECK_PROG(HAVE_DOT, dot, YES, NO)
AC_PATH_PROG([XMLTO], [xmlto])
AM_CONDITIONAL([BUILD_TUTORIAL], [test -n "$XMLTO"])


AM_MAINTAINER_MODE

# see if we want verbose compiler warnings
AC_MSG_CHECKING([maintainer mode])
AC_ARG_ENABLE(maintainer-mode)
AC_MSG_RESULT(${enable_maintainer_mode})

AC_LANG(C++)

# Let's try to get the compiler to be helpful
# (Omit options -Weffc++ and -Wabi because they currently yield too many
# warnings in gcc's standard headers; omit -Wunreachable-code because it isn't
# always right)
if test "$GCC" = "yes" && test "$enable_maintainer_mode" = "yes"; then
	for option in \
		-Werror \
		-Wno-long-double \
		-Wno-div-by-zero \
		-ffor-scope \
		-fstrict-aliasing \
		-funit-at-a-time \
		-pedantic \
		-fno-nonansi-builtins \
		-Wall \
		-Wmultichar \
		-W \
		-Wextra \
		-Wfloat-equal \
		-Wundef \
		-Wshadow \
		-Wpointer-arith  \
		-Wcast-qual  \
		-Wcast-align  \
		-Wconversion \
		-Wctor-dtor-privacy \
		-Wendif-labels \
		-Wredundant-decls \
		-Wsign-compare \
		-Wwrite-strings  \
		-Wnon-virtual-dtor \
		-Wreorder \
		-Wold-style-cast \
		-Woverloaded-virtual \
		-Wsign-promo \
	; do
		SAVE_CXXFLAGS="$CXXFLAGS"
		CXXFLAGS="$CXXFLAGS $option"
		AC_MSG_CHECKING([whether $CXX understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CXXFLAGS="$SAVE_CXXFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CXXFLAGS
	done
	unset option
fi

AC_MSG_CHECKING([thread safety])
AC_ARG_ENABLE(thread-safety,
	[AS_HELP_STRING(--disable-thread-safety,
		[Allow non-threadsafe functions to be used])],
	[enable_thread_safety=no],[enable_thread_safety=yes])
AC_MSG_RESULT(${enable_thread_safety})


# TODO: New --with-std= option
AH_TEMPLATE(PGSTD, [name of standard library namespace])
# Check for alternative "standard" namespaces in increasing order of preference
AC_MSG_CHECKING([name of standard library namespace])
for ns in "" std stlp_std ; do
	AC_TRY_COMPILE([#include <string>],[${ns}::string a;],[std=${ns}], [])
done
AC_DEFINE_UNQUOTED(PGSTD,[$std],[Name of standard namespace (normally std)])
AC_MSG_RESULT([${std}])
if ! test -z "${std}" ; then
	usestd="using namespace ${std};"
fi


ioshdr=yes
AC_CHECK_HEADER(ios,AC_DEFINE(PQXX_HAVE_IOS,1,
[Define if you have the <ios> header]),
ioshdr=no)

streambuf=yes
AC_CHECK_HEADER(streambuf,AC_DEFINE(PQXX_HAVE_STREAMBUF,1,
[Define if you have the <streambuf> header; if not, <streambuf.h> is used]),
streambuf=no)

localehdr=yes
AC_CHECK_HEADER(locale,AC_DEFINE(PQXX_HAVE_LOCALE,1,
[Define if you have the <locale> header]),
localehdr=no)

AC_MSG_CHECKING([char_traits template])
char_traits=yes
AC_TRY_COMPILE([#include <string>
	${usestd}], 
	[char_traits<char>::eof()],
	AC_DEFINE(PQXX_HAVE_CHAR_TRAITS, 1,
[Define if std provides the char_traits template and <char> specialization]),
char_traits=no)
AC_MSG_RESULT($char_traits)

AC_MSG_CHECKING(["warning" preprocessor directive])
cpp_warning=yes
AC_TRY_COMPILE([#warning cpp supports warning directive], [], AC_DEFINE(PQXX_HAVE_CPP_WARNING, 1,
[Define if preprocessor supports nonstandard "warning" directive]),
cpp_warning=no)
AC_MSG_RESULT($cpp_warning)

AC_MSG_CHECKING(["message" preprocessor pragma])
cpp_pragma_message=yes
AC_TRY_COMPILE([#pragma message("cpp supports message pragma")], [], AC_DEFINE(PQXX_HAVE_CPP_PRAGMA_MESSAGE, 1,
[Define if preprocessor supports pragma "message"]),
cpp_pragma_message=no)
AC_MSG_RESULT($cpp_pragma_message)

# Find PostgreSQL includes and libraries
AC_PATH_PROGS(PG_CONFIG, pg_config)
if test -z "$PG_CONFIG" || test ! -r "$PG_CONFIG"; then
	AC_MSG_ERROR([
PostgreSQL configuration script pg_config not found.  Make sure this is in your
command path before configuring.  Without it, the configure script has no way to
find the right location for the libpq library and its headers.
])
fi
with_postgres_include=`$PG_CONFIG --includedir`
AC_MSG_NOTICE([using PostgreSQL headers at $with_postgres_include])
with_postgres_lib=`$PG_CONFIG --libdir`
AC_MSG_NOTICE([using PostgreSQL libraries at $with_postgres_lib])

AC_SUBST(with_postgres_lib)
AC_SUBST(with_postgres_include)
POSTGRES_LIB="-L${with_postgres_lib} -R${with_postgres_lib} -lpq"
AC_SUBST(POSTGRES_LIB)
POSTGRES_INCLUDE="-I${with_postgres_include}"
AC_SUBST(POSTGRES_INCLUDE)


AC_HEADER_STDC

AC_MSG_CHECKING([ability to compile programs using the standard C library])
AC_TRY_COMPILE([#include <string.h>
	${usestd}
	extern void f(size_t);],
	[f(strlen(""))],[],
	[AC_MSG_ERROR([
Could not build even a tiny test program using the standard C library.

Something very basic has gone wrong; try reading config.log to find out what.
You'll probably want to go straight to the end of that file and read backwards
until you find an error message.  Then identify the problem, try to fix it, and
run this script again.

The configure script's --help option may provide useful tips on how to influence
what compiler and command line options are used, what additional libraries are
linked in, and so on.
])])
AC_MSG_RESULT(yes)


AC_CHECK_HEADER([${with_postgres_include}/libpq-fe.h],[],[AC_MSG_ERROR([
Can't find libpq-fe.h in ${with_postgres_include}.  Are you sure the libpq
headers are installed correctly?  They should be in the directory returned by
"pg_config --includedir".

If you do have libpq (the C-language client library for PostgreSQL) installed,
make sure you have the related development materials--mainly its header files--
as well as the library binary.  Some system distributions keep the two in
seperate packages with names like "alibrary" and "alibrary-dev", respectively.
In that case, make sure you have the latter installed as well.
])])


AC_MSG_CHECKING([for ability to compile source files using libpq])
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],[PQexec(0,"")],
[],
[AC_MSG_ERROR([
Could not compile a call to a basic libpq function.  There must be something
seriously wrong with the headers that "pg_config --includedir" pointed to; the
contents of config.log may give you a clue about the nature of the failure.
Source including the libpq header libpq-fe.h can be compiled, but a call to the
most basic libpq function PQexec() failed to compile successfully.  This is the
litmus test for a working libpq.
])])
AC_MSG_RESULT(yes)

# Perform this check in C; autoconf's AC_HAVE_LIBRARY breaks in C++ because it
# tries to call main()
AC_LANG_PUSH(C)

AC_MSG_CHECKING([for ability to link with libpq])
AC_HAVE_LIBRARY(pq, [], [AC_MSG_ERROR([
Could not link to libpq.  Make sure you have the PostgreSQL client library
installed, and that the library binary can be found in the location returned by
"pg_config --libdir".
])], -L${with_postgres_lib})

AC_MSG_CHECKING([for correct linkage of basic libpq functions])
AC_CHECK_LIB([pq], [PQexec],[], [AC_MSG_ERROR([
Did not find the PQexec() function in libpq.  This is the litmus test for a
working libpq installation.

A source file using the PQexec() function did compile without problems, and the
libpq library is available for linking, but for some reason a call to PQexec()
failed to link properly to the libpq library.  This may be because the libpq
library file is damaged, or in some incorrect format. or if your libpq is much
more recent than libpqxx version @PQXXVERSION@, perhaps libpq has undergone a
radical ABI change.

The last parts of config.log may give you a clue as to what really went wrong,
but be warned that this is no easy reading.  Look for the last error message
occurring in the file.
])], -L${with_postgres_lib})
AC_MSG_RESULT(yes)

AC_LANG_POP(C)

AC_MSG_CHECKING([for correct C++ linkage of basic libpq functions])
if test "$enable_maintainer_mode" = "yes"; then
AC_CHECK_LIB([pq], [PQexec],[], [AC_MSG_ERROR([
Linking a call to libpq failed in C++, even though it succeeded in C.  If your
C and C++ compilers are very different beasts, this may mean that we don't have
the right options for linking with it after all.  Alternatively, this may be
caused by a bug in autoconf or automake.

Since you are configuring libpqxx using the --enable-maintainer-mode option, any
compiler warnings for autoconf's test programs will be treated as errors.  The
problem may just go away if you run the configure script again but with the
maintainer mode option omitted.  Please report such cases (including the
config.log produced by the failed attempt) so future versions can attempt to
work around the problem.

Should this error occur even while not in maintainer mode, read the config.log
file for more detailed information.  Look for the last error message, which may
be several pages up from the end of the file.
])], -L${with_postgres_lib})
else
AC_CHECK_LIB([pq], [PQexec],[], [AC_MSG_ERROR([
Linking a call to libpq failed in C++, even though it succeeded in C.  If your
C and C++ compilers are very different beasts, this may mean that we don't have
the right options for linking with it after all.

Read the config.log file for more detailed information.  Look for the last error
message, which may be several pages up from the end of the file.
])], -L${with_postgres_lib})
fi
AC_MSG_RESULT(yes)


AC_CHECK_HEADER([${with_postgres_include}/libpq/libpq-fs.h],[],[AC_MSG_ERROR([
Can't find libpq-fs.h in ${with_postgres_include}/libpq.
Please locate it and report your findings so this script can be corrected.

If the file is not on your system, either your libpq version is much newer than
your libpqxx version and has changed radically, or it is hopelessly out of date,
or your installation of the PostgreSQL client library is incomplete.
])])

AC_MSG_CHECKING([that type of libpq's Oid is as expected])
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>
	#include"${srcdir}/include/pqxx/libpq-forward.hxx"
	extern void f(pqxx::oid&);],
	[Oid o;f(o)],
	[],
	[AC_MSG_ERROR([
The Oid typedef in libpq has changed.  Please notify the libpqxx authors of the
change!
])])
AC_MSG_RESULT(yes)


# Check presence and version of strerror_r()
if test "$enable_thread_safety" = "yes" ; then
AC_MSG_CHECKING([for strerror_r])
AC_TRY_COMPILE([#include <cstring>],[strerror_r(0,0,0)],
	[AC_DEFINE(PQXX_HAVE_STRERROR_R,1,[Define if strerror_r exists])],
	[AC_MSG_ERROR([
No definition of strerror_r, the thread-safe version of strerror(), was found in
your <cstring> header.  Consider building a non-threadsafe version of libpqxx
using the configure script's --disable-thread-safety option.
])])
AC_MSG_RESULT(yes)

AC_MSG_CHECKING([for SUSv3-style strerror_r returning int])
AC_TRY_COMPILE(
	[#include <cstring>],[int(*f)(int,char*,size_t)=strerror_r;f(0,0,0)],
	strerror_r_int=yes,
	strerror_r_int=no)
AC_MSG_RESULT($strerror_r_int)

AC_MSG_CHECKING([for strerror_r returning char *])
AC_TRY_COMPILE(
	[#include <cstring>],[char*(*f)(int,char*,size_t n)=strerror_r;f(0,0,0)],
	strerror_r_charp=yes,
	strerror_r_charp=no)
AC_MSG_RESULT($strerror_r_charp)

if ! test "$strerror_r_int" = "yes" && ! test "$strerror_r_charp" = "yes"; then
AC_MSG_CHECKING([for AIX-style strerror_r (which also correctly returns int)])
AC_TRY_COMPILE(
	[#include <cstring>],[int(*f)(int errnum, char *buf, int n)=strerror_r;f(0,0,0)],
	strerror_r_int=yes,
	[])
AC_MSG_RESULT($strerror_r_int)
fi

if test "$strerror_r_int" = "yes" ; then
	AC_DEFINE(PQXX_STRERROR_R_INT,1,[Define for standard SUSv3 strerror_r])
	if test "$strerror_r_charp" = "yes" ; then
		AC_MSG_ERROR([
Your compiler offers a strerror_r() function, but test programs redeclaring it
as returning int and char *, respectively, both compile successfully.  The
former is what the Single Unix Specification SUSv3 dictates, and the latter is
an older GNU libc function.  At least one of these tests should have failed,
since there can't be two versions of this function taking the same arguments but
returning different types.

As a result of this ambiguity, the configure script was unable to determine
which version of the function is correct.  You may need to use less permissive
compiler options so that at least one of the alternatives will fail to compile.

See the config.log for more details; search for strerror_r to find the relevant
snippets.  If all else fails, consider compiling a non-threadsafe version of
libpqxx using the configure script's --disable-thread-safety option.
])
	fi
else
	if ! test "$strerror_r_charp" = "yes" ; then
			AC_MSG_ERROR([
Your compiler's definition of strerror_r() fits none of the known signatures for
that function.  Consider building a non-threadsafe version of libpqxx using the
configure script's --disable-thread-safety option.
])
	fi
fi

fi


AC_MSG_CHECKING([for long double])
long_double=yes
AC_TRY_COMPILE(,[long double x=0;return int(x)],
	AC_DEFINE(PQXX_HAVE_LONG_DOUBLE,1,
	[Define if the compiler supports the standard "long double" type]),
	long_double=no)
AC_MSG_RESULT($long_double)

AC_MSG_CHECKING([for working <sys/select.h>])
select_h=yes
AC_TRY_COMPILE(
	[#include <cstring>
#include <sys/select.h>
${usestd}]
	, [select(0,0,0,0,0)]
	, AC_DEFINE(PQXX_HAVE_SYS_SELECT_H,1,
[Define if the sys/select.h header defines a working select() and friends, as per POSIX 1003.1-2001])
	,select_h=no
)
AC_MSG_RESULT($select_h)


# Long-standing annoyance in glibc: the definition for FD_SET includes an
# unnecessary C-style cast that the compiler may warn for.  If the compiler is
# configured to treat warnings as errors, that may be a problem for us.
AC_MSG_CHECKING([for working fd_set])
if test "$enable_maintainer_mode" = "yes"; then
AC_TRY_COMPILE(
[#include <cstring>
#ifdef PQXX_HAVE_SYS_SELECT_H
#include <sys/select.h>
#else
#include <ctime>
#include <sys/types.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef _WIN32
#include <winsock2.h>
#endif
${usestd}],
	[fd_set s;FD_ZERO(&s);FD_SET(1,&s)],
	[],
	[AC_MSG_ERROR([
Could not compile code using fd_set.  This may be a known problem with GNU libc
and the extremely strict compiler options used in libpqxx's maintainer mode; try
configuring again, this time omitting the --enable-maintainer-mode option.
])])
else
AC_TRY_COMPILE(
[#include <cstring>
#ifdef PQXX_HAVE_SYS_SELECT_H
#include <sys/select.h>
#else
#include <ctime>
#include <sys/types.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef _WIN32
#include <winsock2.h>
#endif
${usestd}],
	[fd_set s;FD_ZERO(&s);FD_SET(1,&s)],
	[],
	[AC_MSG_ERROR([
Could not compile code using fd_set.  There is something seriously wrong, or
maybe your warning options are too strict.  If you are using GNU libc (as will
be the case on a GNU/Linux system) and are telling the compiler to treat
warnings as errors, the cause may be an old-style cast in the definition of
FD_SET that triggers a compiler warning.

See config.log for more details; look for the last error message in the file.
])])
fi
AC_MSG_RESULT(yes)


# TODO: Should actually _run_ this program, not just compile it
AC_MSG_CHECKING([if select() accepts NULL fdsets])
select_accepts_null=yes
AC_TRY_COMPILE(
[#include <cstring>
#ifdef PQXX_HAVE_SYS_SELECT_H
#include <sys/select.h>
#else
#include <ctime>
#include <sys/types.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef _WIN32
#include <winsock2.h>
#endif
${usestd}],
	[fd_set s;FD_ZERO(&s);FD_SET(1,&s);return select(2,NULL,&s,&s,NULL)<=0],
	AC_DEFINE(PQXX_SELECT_ACCEPTS_NULL,1,
[Define if select() accepts NULL fd_set arguments]),
	select_accepts_null=no
)
AC_MSG_RESULT($select_accepts_null)


AC_MSG_CHECKING([sleep()])
sleep=yes
AC_TRY_COMPILE([#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
	${usestd}],[sleep(0x01)],
	AC_DEFINE(PQXX_HAVE_SLEEP, 1, [Define if POSIX sleep() exists]),
	[sleep=no]
)
AC_MSG_RESULT($sleep)

AC_MSG_CHECKING([PQescapeString()])
pqescapestring=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[char c[1];PQescapeString(c,"",0x01)],
	AC_DEFINE(PQXX_HAVE_PQESCAPESTRING, 1,
		[Define if libpq has PQescapeString()]),
	[pqescapestring=no]
)
AC_MSG_RESULT($pqescapestring)

AC_MSG_CHECKING([PQescapeBytea()])
pqescapebytea=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>
#include<cstddef>
${usestd}],
	[size_t l=0;const unsigned char c[]="";PQescapeBytea(c,1,&l)],
	AC_DEFINE(PQXX_HAVE_PQESCAPEBYTEA,1,[Define if libpq has PQescapeBytea()]),
	[pqescapebytea=no]
)
AC_MSG_RESULT($pqescapebytea)

AC_MSG_CHECKING([PQunescapeBytea()])
pqunescapebytea=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>
	${usestd}],
	[size_t l=0;const unsigned char c[]="";PQunescapeBytea(c,&l)],
	AC_DEFINE(PQXX_HAVE_PQUNESCAPEBYTEA,1,[Define if libpq has PQunescapeBytea()]),
	[pqunescapebytea=no]
)
AC_MSG_RESULT($pqunescapebytea)

AC_MSG_CHECKING([PQfreemem()])
pqfreemem=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[char c='x';PQfreemem(&c)],
	AC_DEFINE(PQXX_HAVE_PQFREEMEM,1,[Define if libpq has PQfreemem()]),
	[pqfreemem=no]
)
AC_MSG_RESULT($pqfreemem)

AC_MSG_CHECKING([PQfreeNotify()])
pqfreenotify=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[char c='x';PQfreeNotify(&c)],
	AC_DEFINE(PQXX_HAVE_PQFREENOTIFY,1,[Define if libpq has PQfreeNotify()]),
	[pqfreenotify=no]
)
AC_MSG_RESULT($pqfreenotify)

AC_MSG_CHECKING([PQftable()])
pqftable=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGresult*r=0;PQftable(r,0)],
	AC_DEFINE(PQXX_HAVE_PQFTABLE,1,[Define if libpq has PQftable()]),
	[pqftable=no]
)
AC_MSG_RESULT($pqftable)

AC_MSG_CHECKING([for new COPY functions])
pqputcopy=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGconn*c=0;PQputCopyData(c,"",0)],
	AC_DEFINE(PQXX_HAVE_PQPUTCOPY,1,[Define if libpq has PQputCopyData() and related functions]),
	[pqputcopy=no]
)
AC_MSG_RESULT($pqputcopy)

AC_MSG_CHECKING([PQexecPrepared()])
pqexecprepared=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGconn*c=0;const char*p[1]={0};const int i=0;PQexecPrepared(c,"",i,p,&i,&i,i)],
	AC_DEFINE(PQXX_HAVE_PQEXECPREPARED,1,[Define if libpq has PQexecPrepared()]),
	[pqexecprepared=no]
)
AC_MSG_RESULT($pqexecprepared)

AC_MSG_CHECKING([PQresultErrorField()])
pqresulterrorfield=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGresult*r=0;PQresultErrorField(r,PG_DIAG_STATEMENT_POSITION)],
	AC_DEFINE(PQXX_HAVE_PQRESULTERRORFIELD,1,[Define if libpq has PQresultErrorField() and PG_DIAG_STATEMENT_POSITION]),
	[pqresulterrorfield=no]
)
AC_MSG_RESULT($pqresulterrorfield)

AC_CHECK_HEADER(limits,
	[AC_DEFINE(PQXX_HAVE_LIMITS, 1, [Define if <limits> exists])])

AC_MSG_CHECKING([for C99 isnan()])
c_isnan=yes
AC_TRY_COMPILE([#include <cmath>
	extern double f();
	${usestd}],
	[if(isnan(f())f()],
	AC_DEFINE(PQXX_HAVE_C_ISNAN,1,[Define if math.h defines C99 isnan()]),
	[c_isnan=no]
)
AC_MSG_RESULT($c_isnan)

AC_MSG_CHECKING([for std::numeric_limits<>::quiet_NaN()])
quiet_nan=yes
AC_TRY_COMPILE([#include <limits>
	extern void f(double);
	${usestd}],
	[f(numeric_limits<double>::quiet_NaN())],
	[AC_DEFINE(PQXX_HAVE_QUIET_NAN,1,
		[Define if std::numeric_limits has quiet_NaN()])],
	[quiet_nan=no])
AC_MSG_RESULT($quiet_nan)

AC_MSG_RESULT([for C NAN macro])
c_nan=yes
AC_TRY_COMPILE([#include <cmath>
	extern void f(double);
	${usestd}],
	[f(NAN)],
	[AC_DEFINE(PQXX_HAVE_C_NAN,1,
		[Define if C math header defines NAN])],
	[c_nan=no])
AC_MSG_RESULT($c_nan)

AC_MSG_CHECKING([for C99 nan() family])
nan=yes
AC_TRY_COMPILE([#include <cmath>
	${usestd}
	extern void f(double);],
	[f(nan(""))],
	[AC_DEFINE(PQXX_HAVE_NAN,1,
		[Define if C99 fnan()/nan()/lnan() are available])],
	[nan=no])
AC_MSG_RESULT($nan)

AC_MSG_CHECKING([whether std::string has a clear() function])
string_clear=yes
AC_TRY_COMPILE([#include <string>
	${usestd}],
	[string i;i.clear()],
	[AC_DEFINE(PQXX_HAVE_STRING_CLEAR,
			1,
			[Define if string class has the clear() function])],
	[string_clear=no])
AC_MSG_RESULT($string_clear)

AC_MSG_CHECKING([if count_if() works as expected])
count_if='yes'
AC_TRY_COMPILE([#include <algorithm>
#include <functional>
${usestd}
struct P{bool operator()(const int&)const{return false;}}p;],
	[int v;return int(count_if(&v,&v,p))],
	[AC_DEFINE(PQXX_HAVE_COUNT_IF,
			1,
			[Define if count_if() works according to the standard])],
	[count_if='no'])
AC_MSG_RESULT($count_if)

AC_MSG_CHECKING([whether <iterator> defines a usable iterator template])
AC_TRY_COMPILE([#include <iterator>
	${usestd}],
	[struct I:iterator<random_access_iterator_tag,int>{}],
	[it='yes'],
	[AC_DEFINE(PQXX_BROKEN_ITERATOR,
			1,
			[Define if <iterator> lacks an iterator template definition])
      	 it='no'])
AC_MSG_RESULT($it)

AC_MSG_CHECKING([for reverse_iterator template])
reverseit='yes'
AC_TRY_COMPILE([#include <iterator>
	${usestd} struct I:iterator<random_access_iterator_tag,int>{};],
	[reverse_iterator<I> rit],
	[AC_DEFINE(PQXX_HAVE_REVERSE_ITERATOR,
		1,
		[Define if reverse_iterator template works as expected])],
	[reverseit='no'])
AC_MSG_RESULT($reverseit)


AC_MSG_CHECKING([whether overloaded using-declarations work])
AC_TRY_COMPILE([struct A{void f(int){}};struct B:A{using A::f;void f(int,bool){}};],
	[B b;b.f(1,true);],
	[usingdecl='yes'],
	[AC_DEFINE(PQXX_BROKEN_USING_DECL,
		1,
		[Define if function overloading using "using" breaks])
	 usingdecl='no'])
AC_MSG_RESULT($usingdecl)

AC_PROG_MAKE_SET

AC_CONFIG_FILES([Makefile config/Makefile debian/Makefile doc/Makefile doc/Doxyfile src/Makefile
test/Makefile tools/Makefile win32/Makefile include/Makefile include/pqxx/Makefile libpqxx.pc pqxx-config libpqxx.spec])

AC_CONFIG_COMMANDS([configitems],
[# Extract configuration items into various configuration headers
# This uses the configitems file, a database consisting of text lines with the
# following single-tab-separated fields:
# 1. Name of the configuration item, e.g. PQXX_HAVE_PTRDIFF_T
# 2. Publication marker: public or internal
# 3. A single environmental factor determining the item, e.g. libpq or compiler
PUBLICATIONS=`cut -f 2 ${srcdir}/configitems | sort -u`
FACTORS=`cut -f 3 ${srcdir}/configitems | sort -u`
for publication in $PUBLICATIONS ; do
	for factor in $FACTORS ; do
		CONFIGFILE="include/pqxx/config-$publication-$factor.h"
		echo -n "Generating $CONFIGFILE: "
		if ! grep -w -h -F "`grep \"\<${publication}\>\" \"${srcdir}/configitems\" | grep \"\<${factor}\>\" | grep -v '^$' | cut -f 1`" include/pqxx/config.h >"$CONFIGFILE" ; then
			rm -f -- "$CONFIGFILE"
			echo "no items--deleting"
		else
			echo "ok"
		fi
	done
done
])

AC_OUTPUT

