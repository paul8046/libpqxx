#
# CAUTION: THE configure.ac FILE IS AUTOMATICALLY GENERATED!  DO NOT EDIT IT.
#
# If you want to make changes to configure.ac, edit configure.ac.in instead.
#
# Process configure.ac.in with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(libpqxx, @PQXXVERSION@, [Jeroen T. Vermeulen <jtv@xs4all.nl>])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR([config/m4])
AM_INIT_AUTOMAKE(libpqxx, @PQXXVERSION@)

PQXXVERSION=@PQXXVERSION@
AC_SUBST(PQXXVERSION)

AC_CONFIG_SRCDIR([src/connection.cxx])
AM_CONFIG_HEADER([include/pqxx/config.h])

# default prefix for installs
AC_PREFIX_DEFAULT(/usr/local)

AC_LANG(C++)

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_DISABLE_SHARED
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PATH_PROG([MKDIR], [mkdir])
AC_PATH_PROG([DOXYGEN], [doxygen])
AM_CONDITIONAL([BUILD_REFERENCE], [test -n "$DOXYGEN"])
AC_PATH_PROG([XMLTO], [xmlto])
AM_CONDITIONAL([BUILD_TUTORIAL], [test -n "$XMLTO"])

# TODO: Rename PGSTD to PQXXSTD
# TODO: Allow PQXX_PQ_IN_NAMESPACE to be defined by command line option

# check that std namespace is actually called std
# not sure how to check for other namespaces...
AH_TEMPLATE(PGSTD, [name of standard namespace])
AC_MSG_CHECKING([name of standard namespace])
AC_TRY_COMPILE(
	[#include <string>]
	, [std::string a;]
	, AC_DEFINE(PGSTD,[std],[Does the standard namespace exist?])
	, AC_MSG_ERROR([Can't find std namespace])
)
AC_MSG_RESULT($std)

AM_MAINTAINER_MODE

# see if we want verbose compiler warnings
AC_MSG_CHECKING([maintainer mode])
AC_ARG_ENABLE(maintainer-mode,
	AC_HELP_STRING(
		[--enable-maintainer-mode],
		[Use this for verbose and pedantic compiler warnings. Not for normal builds. (default is no)]
	)
)
AC_MSG_RESULT(${enable_maintainer_mode})

# Let's try to get the compiler to be helpful
# (Omit options -Weffc++ and -Wabi because they currently yield too many 
# warnings in gcc's standard headers; omit -Wunreachable-code because it isn't 
# always right)
if test "$GCC" = "yes" && test "$enable_maintainer_mode" = "yes"; then
	for option in \
		-Werror \
		-ffor-scope \
		-fstrict-aliasing \
		-funit-at-a-time \
		-pedantic \
		-fno-nonansi-builtins \
		-Wall \
		-Wmultichar \
		-W \
		-Wextra \
		-Wfloat-equal \
		-Wundef \
		-Wshadow \
		-Wpointer-arith  \
		-Wcast-qual  \
		-Wcast-align  \
		-Wconversion \
		-Wctor-dtor-privacy \
		-Wendif-labels \
		-Wredundant-decls \
		-Wsign-compare \
		-Wwrite-strings  \
		-Wnon-virtual-dtor \
		-Wreorder \
		-Wold-style-cast \
		-Woverloaded-virtual \
		-Wsign-promo \
		-Wanal \
		-ffascist \
	; do
		SAVE_CXXFLAGS="$CXXFLAGS"
		CXXFLAGS="$CXXFLAGS $option"
		AC_MSG_CHECKING([whether $CXX understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CXXFLAGS="$SAVE_CXXFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CXXFLAGS
	done
	unset option
fi

ioshdr=yes
AC_CHECK_HEADER(ios,AC_DEFINE(PQXX_HAVE_IOS,1,
[Define if you have the <ios> header]),
ioshdr=no)

streambuf=yes
AC_CHECK_HEADER(streambuf,AC_DEFINE(PQXX_HAVE_STREAMBUF,1,
[Define if you have the <streambuf> header; if not, <streambuf.h> is used]),
streambuf=no)

localehdr=yes
AC_CHECK_HEADER(locale,AC_DEFINE(PQXX_HAVE_LOCALE,1,
[Define if you have the <locale> header]),
localehdr=no)

AC_MSG_CHECKING([char_traits template])
char_traits=yes
AC_TRY_COMPILE([#include <string>], [PGSTD::char_traits<char>::eof()], AC_DEFINE(PQXX_HAVE_CHAR_TRAITS, 1,
[Define if std defines the char_traits template and <char> specialization]),
char_traits=no)
AC_MSG_RESULT($char_traits)

AC_MSG_CHECKING(["warning" preprocessor directive])
cpp_warning=yes
AC_TRY_COMPILE([#warning cpp supports warning directive], [], AC_DEFINE(PQXX_HAVE_CPP_WARNING, 1,
[Define if preprocessor supports nonstandard "warning" directive]),
cpp_warning=no)
AC_MSG_RESULT($cpp_warning)

AC_MSG_CHECKING(["message" preprocessor pragma])
cpp_pragma_message=yes
AC_TRY_COMPILE([#pragma message("cpp supports message pragma")], [], AC_DEFINE(PQXX_HAVE_CPP_PRAGMA_MESSAGE, 1,
[Define if preprocessor supports pragma "message"]),
cpp_pragma_message=no)
AC_MSG_RESULT($cpp_pragma_message)

# Find PostgreSQL includes and libraries
AC_PATH_PROGS(PG_CONFIG, pg_config)
if test -z "$PG_CONFIG" || test ! -r "$PG_CONFIG"; then
	AC_MSG_ERROR([PostgreSQL configuration script was not found])
fi
with_postgres_include=`$PG_CONFIG --includedir`
AC_MSG_NOTICE([using PostgreSQL headers at $with_postgres_include])
with_postgres_lib=`$PG_CONFIG --libdir`
AC_MSG_NOTICE([using PostgreSQL libraries at $with_postgres_lib])

AC_SUBST(with_postgres_lib)
AC_SUBST(with_postgres_include)
POSTGRES_LIB="-L${with_postgres_lib} -R${with_postgres_lib} -lpq"
AC_SUBST(POSTGRES_LIB)
POSTGRES_INCLUDE="-I${with_postgres_include}"
AC_SUBST(POSTGRES_INCLUDE)

# Checks for libraries.
AC_CHECK_LIB([pq], [PQexec], [], [AC_MSG_ERROR([Failed to find a suitable libpq.

PostgreSQL's libpq needs to be installed.
])], -L${with_postgres_lib})

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADER([${with_postgres_include}/libpq-fe.h],,AC_MSG_ERROR(
[Can't find libpq-fe.h in ${with_postgres_include}.]
))

AC_CHECK_HEADER([${with_postgres_include}/libpq/libpq-fs.h],,AC_MSG_ERROR(
[Can't find libpq-fs.h in ${with_postgres_include}/libpq.
Please locate it and report your findings so this script can be corrected.]
))

AC_MSG_CHECKING([for working <sys/select.h>])
select_h=yes
AC_TRY_COMPILE(
	[#include <cstring>
#include <sys/select.h>]
	, [select(0,0,0,0,0)]
	, AC_DEFINE(PQXX_HAVE_SYS_SELECT_H,1,
[Define if the sys/select.h header defines a working select() and friends, as per POSIX 1003.1-2001])
	,select_h=no
)
AC_MSG_RESULT($select_h)

AC_MSG_CHECKING([if select() accepts NULL fdsets])
select_accepts_null=yes
AC_TRY_COMPILE(
	[#include <cstring>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>],
	[fd_set s;FD_ZERO(&s);FD_SET(1,&s);return select(2,NULL,&s,&s,NULL)<=0],
	AC_DEFINE(PQXX_SELECT_ACCEPTS_NULL,1,
[Define if select() accepts NULL fd_set arguments]),
	select_accepts_null=no
)
AC_MSG_RESULT($select_accepts_null)

AC_MSG_CHECKING([sleep()])
sleep=yes
AC_TRY_COMPILE([#include <unistd.h>],[sleep(0x01)],
	AC_DEFINE(PQXX_HAVE_SLEEP, 1, [Define if POSIX sleep() exists]),
	[sleep=no]
)
AC_MSG_RESULT($sleep)

AC_MSG_CHECKING([PQescapeString()])
pqescapestring=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[char c[1];PQescapeString(c,"",0x01)],
	AC_DEFINE(PQXX_HAVE_PQESCAPESTRING,1,[Define if libpq has PQescapeString()]),
	[pqescapestring=no]
)
AC_MSG_RESULT($pqescapestring)

AC_MSG_CHECKING([PQescapeBytea()])
pqescapebytea=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>
#include<cstddef>],
	[size_t l=0;const unsigned char c[]="";PQescapeBytea(c,1,&l)],
	AC_DEFINE(PQXX_HAVE_PQESCAPEBYTEA,1,[Define if libpq has PQescapeBytea()]),
	[pqescapebytea=no]
)
AC_MSG_RESULT($pqescapebytea)

AC_MSG_CHECKING([PQunescapeBytea()])
pqunescapebytea=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[size_t l=0;const unsigned char c[]="";PQunescapeBytea(c,&l)],
	AC_DEFINE(PQXX_HAVE_PQUNESCAPEBYTEA,1,[Define if libpq has PQunescapeBytea()]),
	[pqunescapebytea=no]
)
AC_MSG_RESULT($pqunescapebytea)

AC_MSG_CHECKING([PQfreemem()])
pqfreemem=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[char c='x';PQfreemem(&c)],
	AC_DEFINE(PQXX_HAVE_PQFREEMEM,1,[Define if libpq has PQfreemem()]),
	[pqfreemem=no]
)
AC_MSG_RESULT($pqfreemem)

AC_MSG_CHECKING([PQfreeNotify()])
pqfreenotify=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[char c='x';PQfreeNotify(&c)],
	AC_DEFINE(PQXX_HAVE_PQFREENOTIFY,1,[Define if libpq has PQfreeNotify()]),
	[pqfreenotify=no]
)
AC_MSG_RESULT($pqfreenotify)

AC_MSG_CHECKING([PQftable()])
pqftable=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGresult*r=0;PQftable(r,0)],
	AC_DEFINE(PQXX_HAVE_PQFTABLE,1,[Define if libpq has PQftable()]),
	[pqftable=no]
)
AC_MSG_RESULT($pqftable)

AC_MSG_CHECKING([for new COPY functions])
pqputcopy=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGconn*c=0;PQputCopyData(c,"",0)],
	AC_DEFINE(PQXX_HAVE_PQPUTCOPY,1,[Define if libpq has PQputCopyData() and related functions]),
	[pqputcopy=no]
)
AC_MSG_RESULT($pqputcopy)

AC_MSG_CHECKING([PQexecPrepared()])
pqexecprepared=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGconn*c=0;const char*p[1]={0};const int i=0;PQexecPrepared(c,"",i,p,&i,&i,i)],
	AC_DEFINE(PQXX_HAVE_PQEXECPREPARED,1,[Define if libpq has PQexecPrepared()]),
	[pqexecprepared=no]
)
AC_MSG_RESULT($pqexecprepared)

AC_MSG_CHECKING([PQresultErrorField()])
pqresulterrorfield=yes
AC_TRY_COMPILE([#include<${with_postgres_include}/libpq-fe.h>],
	[PGresult*r=0;PQresultErrorField(r,PG_DIAG_STATEMENT_POSITION)],
	AC_DEFINE(PQXX_HAVE_PQRESULTERRORFIELD,1,[Define if libpq has PQresultErrorField() and PG_DIAG_STATEMENT_POSITION]),
	[pqresulterrorfield=no]
)
AC_MSG_RESULT($pqresulterrorfield)

AC_CHECK_HEADER(limits, 
	[AC_DEFINE(PQXX_HAVE_LIMITS, 1, [Define if <limits> exists])])

AC_MSG_CHECKING([whether std::string has a clear() function])
string_clear='yes'
AC_TRY_COMPILE([#include <string>],
	[PGSTD::string i;i.clear()],
	[AC_DEFINE(PQXX_HAVE_STRING_CLEAR,
			1,
			[Define if string class has the clear() function])],
	[string_clear='no'])
AC_MSG_RESULT($string_clear)

AC_MSG_CHECKING([if count_if() works as expected])
count_if='yes'
AC_TRY_COMPILE([#include <algorithm>
#include <functional>
struct P{bool operator()(const int&)const{return false;}}p;],
	[int v;return int(PGSTD::count_if(&v,&v,p))],
	[AC_DEFINE(PQXX_HAVE_COUNT_IF,
			1,
			[Define if count_if() works according to the standard])],
	[count_if='no'])
AC_MSG_RESULT($count_if)

AC_MSG_CHECKING([whether <iterator> defines a usable iterator template])
AC_TRY_COMPILE([#include <iterator>], 
	[struct I:PGSTD::iterator<PGSTD::random_access_iterator_tag,int>{}],
	[it='yes'],
	[AC_DEFINE(PQXX_BROKEN_ITERATOR, 
			1, 
			[Define if <iterator> lacks an iterator template definition])
      	 it='no'])
AC_MSG_RESULT($it)

AC_MSG_CHECKING([for reverse_iterator template])
reverseit='yes'
AC_TRY_COMPILE([#include <iterator> 
	using namespace PGSTD;struct I:iterator<random_access_iterator_tag,int>{};],
	[reverse_iterator<I> rit],
	[AC_DEFINE(PQXX_HAVE_REVERSE_ITERATOR,
		1,
		[Define if reverse_iterator template works as expected])],
	[reverseit='no'])
AC_MSG_RESULT($reverseit)


AC_MSG_CHECKING([whether overloaded using-declarations work])
AC_TRY_COMPILE([struct A{void foo(int){}};struct B:A{using A::foo;void foo(int,bool){}};],
	[B b;b.foo(1,true);],
	[usingdecl='yes'],
	[AC_DEFINE(PQXX_BROKEN_USING_DECL,
		1,
		[Define if function overloading using "using" breaks])
	 usingdecl='no'])
AC_MSG_RESULT($usingdecl)

AC_PROG_MAKE_SET

AC_CONFIG_FILES([Makefile config/Makefile debian/Makefile doc/Makefile doc/Doxyfile src/Makefile
test/Makefile tools/Makefile win32/Makefile include/Makefile include/pqxx/Makefile libpqxx.pc pqxx-config libpqxx.spec])

AC_CONFIG_COMMANDS([configitems],
[# Extract configuration items into various configuration headers
# This uses the configitems file, a database consisting of text lines with the
# following single-tab-separated fields:
# 1. Name of the configuration item, e.g. PQXX_HAVE_PTRDIFF_T
# 2. Publication marker: public or internal
# 3. A single environmental factor determining the item, e.g. libpq or compiler
PUBLICATIONS=`cut -f 2 ${srcdir}/configitems | sort -u`
FACTORS=`cut -f 3 ${srcdir}/configitems | sort -u`
for publication in $PUBLICATIONS ; do
	for factor in $FACTORS ; do
		CONFIGFILE="include/pqxx/config-$publication-$factor.h"
		echo -n "Generating $CONFIGFILE: "
		if ! grep "\<$publication\>" ${srcdir}/configitems | grep "\<$factor\>" | cut -f 1 | grep -w -h -f - include/pqxx/config.h >"$CONFIGFILE" ; then
			rm -f -- "$CONFIGFILE"
			echo "no items--deleting"
		else
			echo "ok"
		fi
	done
done
])

AC_OUTPUT
