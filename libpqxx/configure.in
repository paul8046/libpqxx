# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)
AC_INIT([libpqxx],[0.1],[Jeroen T. Vermeulen <jtv@xs4all.nl>])
AM_INIT_AUTOMAKE(dist-bzip2 dist-zip)
AC_CONFIG_SRCDIR([src/connection.cxx])
AM_CONFIG_HEADER(config.h)

# default prefix for installs
AC_PREFIX_DEFAULT(/usr/local/pqxx)

# want static libs by default
#AC_DISABLE_STATIC 

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PROG_RANLIB

# check that std namespace is actually called std
# not sure how to check for other namespaces...
AH_TEMPLATE(PGSTD, [name of standard namespace])
AC_LANG_PUSH(C++)
AC_MSG_CHECKING([name of standard namespace])
AC_TRY_COMPILE(
	[#include <string>]
	, [std::string a;]
	, AC_DEFINE(PGSTD,[std],[Does the standard namespace exist?])
	, AC_MSG_ERROR([Can't find std namespace])
)
AC_MSG_RESULT(std)
# Let's try to get the compiler to be helpful
# (Omit the -Waggregate-return and -Weffc++ options because they currently
# yield too many warnings in gcc's standard headers)
if test "$GCC" = "yes"; then
	for option in \
		-pedantic \
		-Wall \
		-Wsystem-headers \
		-W \
		-Wfloat-equal \
		-Wundef \
		-Wshadow \
		-Wpointer-arith  \
		-Wcast-qual  \
		-Wcast-align  \
		-Wwrite-strings  \
		-Wconversion \
		-Wsign-compare \
		-Wmissing-declarations  \
		-Wmissing-noreturn \
		-Wmissing-format-attribute  \
		-Wpacked  \
		-Wpadded \
		-Wredundant-decls \
		-Wunreachable-code \
		-Winline \
		-Wdisabled-optimization \
		-Wctor-dtor-privacy \
		-Wnon-virtual-dtor \
		-Wreorder \
		-Wno-deprecated \
		-Wno-non-template-friend \
		-Wold-style-cast \
		-Woverloaded-virtual \
		-Wno-pmf-conversions \
		-Wsign-promo \
		-Wsynth \
		-Wanal \
		-fascist \
	; do
		SAVE_CXXFLAGS="$CXXFLAGS"
		CXXFLAGS="$CXXFLAGS $option"
		AC_MSG_CHECKING([whether $CXX understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CXXFLAGS="$SAVE_CXXFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CXXFLAGS
	done
	unset option
fi
AC_LANG_POP(C++)

# does the user want to use postgres-style SQL?
AH_TEMPLATE(SQL_DIALECT,[Use postgres SQL?])
AC_ARG_ENABLE(postgres-dialect,
AC_HELP_STRING(
	[--enable-postgres-dialect]
	, [Use postgres-specific SQL statements (default: yes)])
	,
		test "$enableval" = no || SQL_DIALECT=
		AC_DEFINE(SQL_DIALECT,[])
	,
		enable_postgres_dialect=no
		AC_DEFINE(SQL_DIALECT,DIALECT_POSTGRESQL)
)

# Where are the postgres includes...
AC_ARG_WITH(postgres-include,
	AC_HELP_STRING(
		[--with-postgres-include],
		[PostgreSQL headers directory]
	)
	,	test "$withval" = no || with_postgres_include=$withval
	, with_postgres_include=$postgres_include_default
)
POSTGRES_INCLUDE="-I${with_postgres_include}"
AC_SUBST(POSTGRES_INCLUDE)

# ..and libraries?
postgres_lib_default=/usr/lib
AC_ARG_WITH(postgres-lib,
	AC_HELP_STRING(
		[--with-postgres-lib],
		[PostgreSQL library directory containing libpq]
	)
	,	test "$withval" = no || with_postgres_lib=$withval
	, with_postgres_lib=$postgres_lib_default
)
AC_SUBST(with_postgres_lib)
POSTGRES_LIB="-L${with_postgres_lib} -lpq"
AC_SUBST(POSTGRES_LIB)

# Checks for libraries.
AC_CHECK_LIB([pq], [PQexec], [], [AC_MSG_ERROR([Failed to find a suitable libpq.

PostgreSQL's libpq needs to be installed.
Perhaps you need to specify --with-postgres-lib?
])])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([errno.h limits])
AC_CHECK_HEADER([${with_postgres_include}/libpq-fe.h],,AC_MSG_ERROR(
[Can't find libpq-fe.h in ${with_postgres_include}.
Please specify the location of the PostgreSQL include files with
--with-postgres-include=...]
))
# Checks for typedefs, structures, and compiler characteristics.
AC_MSG_CHECKING(whether <iterator> defines an iterator template)
AC_TRY_COMPILE([#include <iterator>], [struct I:std::iterator<std::random_access_iterator_tag,int>{};],
      [AC_DEFINE(BROKEN_ITERATOR, 1, [Define if <iterator> lacks an iterator template definition])
      it='no'],
     [it='yes'])
AC_MSG_RESULT($it)

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_MALLOC
AC_CHECK_FUNCS([memset])

AC_CONFIG_FILES([Makefile src/Makefile test/Makefile include/Makefile])
AC_OUTPUT
